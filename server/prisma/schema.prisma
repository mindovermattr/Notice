
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  password String 
  name  String
  lastname String
  avatarUrl String?

  project_author_id Project[] @relation("project_author")
  project  Project[]
  
  tasks Task[]
  role ProjectUserRoles[]
  comments Comment[]
  attachments Attachment[]
}

model Project {
  id Int @default(autoincrement()) @id
  name String

  author User @relation("project_author",fields: [author_id], references: [id])
  author_id Int
  
  listTasks ListTasks[] 
  users User[]

  user_roles ProjectUserRoles[]
}
model Roles{
  id Int @default(autoincrement()) @id
  role_name String @unique

  project_user ProjectUserRoles[]
}

model ProjectUserRoles{
  id Int @default(autoincrement()) @id
  
  user User @relation(fields: [user_id], references: [id],onDelete: Cascade)
  user_id Int

  project Project @relation(fields: [project_id], references: [id],onDelete: Cascade)
  project_id Int

  role_name Roles @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id Int
}

model ListTasks {
  id Int @default(autoincrement()) @id
  title String
  tasks Task[]

  history ListHistory @relation("ListToHistory", fields: [history_id], references: [id], onDelete: Cascade)
  history_id Int @unique

  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id Int
}

model ListHistory{
  id Int @default(autoincrement()) @id
  history String[]
  list ListTasks? @relation("ListToHistory")
 
}


model Task {
  id Int @default(autoincrement()) @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String 
  description String
  due_date DateTime 
  priority Boolean @default(false)
  isCompleted Boolean @default(false)

  task_list ListTasks @relation(fields: [task_list_id], references: [id], onDelete: Cascade)
  task_list_id Int

  assign_user User? @relation(fields: [assign_id], references: [id], onDelete: Cascade)
  assign_id Int?

  subtasks SubTask[]
  comments Comment[]
  attachments Attachment[]

  status  String
}

model Attachment{
  id Int @default(autoincrement()) @id
  createdAt DateTime @default(now())
  fileUrl String
  task Task @relation(fields: [taskId], references: [id])
  taskId Int @map("task_id")
  user User @relation(fields: [userId], references: [id])
  userId Int @map("user_id")
}

model Comment{
 id Int @default(autoincrement()) @id
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt

 task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)
 task_id Int

 user User @relation(fields: [user_id], references: [id])
 user_id Int
 
 comment String

}


model SubTask {
  id Int @default(autoincrement()) @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String 

  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)
  task_id Int
}

